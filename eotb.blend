import bpy
import random
import math
import time
import tweepy
from mathutils import Vector
import bmesh
import numpy as np

# Global variables
active_tumors = []
last_api_check = 0
api_cache = {"#Blender": 100, "#3DArt": 50}
vertex_normals_cache = {}
vertex_coords_cache = {}
active_tumor_positions = []
region_tumor_count = {"back": 0, "sides": 0, "top": 0, "face": 0}

# Color palette
TUMOR_COLOR_PALETTE = [
    (1.0, 0.3, 0.1), (0.2, 0.8, 0.3), (0.8, 0.2, 0.8), (0.1, 0.5, 1.0),
    (1.0, 0.8, 0.1), (1.0, 0.2, 0.5), (0.5, 1.0, 0.2), (1.0, 0.5, 0.0),
    (0.3, 0.8, 0.8), (0.8, 0.4, 0.2), (0.6, 0.2, 1.0), (1.0, 0.1, 0.1),
    (0.2, 1.0, 0.5), (1.0, 0.0, 0.8), (0.4, 0.9, 1.0)
]

# API setup
client = tweepy.Client(
    bearer_token="YOUR_BEARER_TOKEN",
    consumer_key="YOUR_API_KEY",
    consumer_secret="YOUR_API_SECRET",
    access_token="YOUR_ACCESS_TOKEN",
    access_token_secret="YOUR_ACCESS_TOKEN_SECRET"
)

# Object setup with fallback
obj_name = "Head_17Nov"
obj = bpy.data.objects.get(obj_name)
if not obj:
    print(f"Error: Object '{obj_name}' not found. Searching for alternatives...")
    obj = next((o for o in bpy.data.objects if "Head" in o.name), None)
    if obj:
        print(f"Found alternative object: {obj.name}")
    else:
        raise ValueError("No suitable object found. Please ensure 'Head_17Nov' or a 'Head' object exists.")

def build_vertex_cache():
    global vertex_normals_cache, vertex_coords_cache
    mesh = obj.data
    vertex_normals_cache.clear()
    vertex_coords_cache.clear()
    
    for i, vert in enumerate(mesh.vertices):
        vertex_coords_cache[i] = vert.co.copy()
        vertex_normals_cache[i] = vert.normal.copy()
    
    print(f"Built vertex cache for {len(mesh.vertices)} vertices")

def is_face_front_region(vertex_co, centroid, bounds):
    x, y, z = vertex_co.x, vertex_co.y, vertex_co.z
    min_x, max_x = bounds[0]
    min_y, max_y = bounds[1]
    min_z, max_z = bounds[2]

    rel_x = (x - centroid.x) / (max_x - min_x) if max_x != min_x else 0
    rel_y = (y - centroid.y) / (max_y - min_y) if max_y != min_y else 0
    rel_z = (z - centroid.z) / (max_z - min_z) if max_z != min_z else 0

    return rel_y < 0.1 or (rel_y < 0.3 and rel_z > 0.2) or (rel_y < 0.2 and abs(rel_x) < 0.3 and rel_z > -0.2)

def is_base_region(vertex_co, centroid, bounds):
    z = vertex_co.z
    min_z, max_z = bounds[2]
    rel_z = (z - centroid.z) / (max_z - min_z) if max_z != min_z else 0
    return rel_z < -0.35

def classify_vertex_region_strict(vertex_co, centroid, bounds):
    x, y, z = vertex_co.x, vertex_co.y, vertex_co.z
    min_x, max_x = bounds[0]
    min_y, max_y = bounds[1]
    min_z, max_z = bounds[2]

    rel_x = (x - centroid.x) / (max_x - min_x) if max_x != min_x else 0
    rel_y = (y - centroid.y) / (max_y - min_y) if max_y != min_y else 0
    rel_z = (z - centroid.z) / (max_z - min_z) if max_z != min_z else 0

    if rel_y > 0.15:
        return "back"
    elif rel_z > 0.25:
        return "top"
    elif abs(rel_x) > 0.2:
        return "sides"
    return None

def get_safe_vertex_indices():
    global vertex_normals_cache, vertex_coords_cache
    mesh = obj.data
    safe_vertices = []
    excluded_count = 0
    region_vertices = {"back": [], "sides": [], "top": []}

    build_vertex_cache()

    coords = [vertex_coords_cache[i] for i in range(len(mesh.vertices))]
    centroid = Vector(np.mean([np.array([co.x, co.y, co.z]) for co in coords], axis=0))
    min_coords = [min(vertex_coords_cache[i][j] for i in range(len(mesh.vertices))) for j in range(3)]
    max_coords = [max(vertex_coords_cache[i][j] for i in range(len(mesh.vertices))) for j in range(3)]
    bounds = list(zip(min_coords, max_coords))

    print(f"Centroid: ({centroid.x:.2f}, {centroid.y:.2f}, {centroid.z:.2f})")

    for i in range(len(mesh.vertices)):
        vertex_co = vertex_coords_cache[i]
        if is_face_front_region(vertex_co, centroid, bounds) or is_base_region(vertex_co, centroid, bounds):
            excluded_count += 1
            continue
        region = classify_vertex_region_strict(vertex_co, centroid, bounds)
        if region:
            safe_vertices.append(i)
            region_vertices[region].append(i)

    total_vertices = len(mesh.vertices)
    print(f"AGGRESSIVE EXCLUSION: {excluded_count}/{total_vertices} vertices excluded ({excluded_count/total_vertices*100:.1f}%)")
    print(f"Safe vertices: {len(safe_vertices)}")
    print(f"Back: {len(region_vertices['back'])}, Sides: {len(region_vertices['sides'])}, Top: {len(region_vertices['top'])}")

    return safe_vertices, region_vertices, centroid, bounds

def get_random_tumor_color():
    base_color = random.choice(TUMOR_COLOR_PALETTE)
    variation = 0.15
    return (
        max(0, min(1, base_color[0] + random.uniform(-variation, variation))),
        max(0, min(1, base_color[1] + random.uniform(-variation, variation))),
        max(0, min(1, base_color[2] + random.uniform(-variation, variation)))
    )

def create_ultra_fast_tumor_shape_key(frame, vertex_index, hashtag, size="large", region="unknown"):
    global obj, active_tumor_positions, region_tumor_count

    if vertex_index not in SAFE_VERTICES:
        return None

    seed_co = vertex_coords_cache[vertex_index]
    min_distance = 20.0 if size == "small" else 30.0
    for existing_pos in active_tumor_positions:
        delta = seed_co - existing_pos
        distance = math.sqrt(delta.x*delta.x + delta.y*delta.y + delta.z*delta.z)
        if distance < min_distance:
            return None

    # Ensure object is in correct mode and context
    if bpy.context.object != obj or obj.mode != 'OBJECT':
        bpy.context.view_layer.objects.active = obj
        bpy.ops.object.mode_set(mode='OBJECT')
        print(f"Switched to object {obj.name} in OBJECT mode")

    bpy.ops.object.shape_key_add(from_mix=False)
    tumor_key = obj.data.shape_keys.key_blocks[-1]
    
    tumor_color = get_random_tumor_color()
    color_name = f"C{random.randint(100,999)}"
    tumor_key.name = f"T_{frame}_{color_name}_{size}_{region}"

    mesh = obj.data
    if not mesh.vertex_colors or "TumorColors" not in mesh.vertex_colors:
        mesh.vertex_colors.new(name="TumorColors")
    color_layer = mesh.vertex_colors["TumorColors"]
    mesh.vertex_colors.active = color_layer

    if size == "small":
        growth_radius = random.uniform(15.0, 25.0)
        base_magnitude = random.uniform(8.0, 15.0)
    else:
        growth_radius = random.uniform(30.0, 50.0)
        base_magnitude = random.uniform(20.0, 40.0)

    if region == "back":
        growth_radius *= 1.2
        base_magnitude *= 1.1

    scale_variation = random.uniform(0.8, 1.5)
    growth_magnitude = base_magnitude * scale_variation
    growth_radius_sq = growth_radius * growth_radius

    affected_vertices = 0
    colored_vertices = 0

    for i in range(len(mesh.vertices)):
        vert_co = vertex_coords_cache[i]
        if is_face_front_region(vert_co, centroid, bounds) or is_base_region(vert_co, centroid, bounds):
            continue

        delta = vert_co - seed_co
        distance_sq = delta.x*delta.x + delta.y*delta.y + delta.z*delta.z

        if distance_sq < growth_radius_sq:
            distance = math.sqrt(distance_sq)
            influence = (1.0 - (distance / growth_radius)) ** random.uniform(1.1, 2.0)
            noise = 0.7 + random.random() * 0.6
            vert_normal = vertex_normals_cache[i]
            displacement = vert_normal * (growth_magnitude * influence * noise)
            tumor_key.data[i].co = vert_co + displacement
            
            if influence > 0.1:
                color_intensity = min(1.0, influence * random.uniform(0.9, 1.3))
                for poly_idx, polygon in enumerate(mesh.polygons):
                    if i in polygon.vertices:
                        for loop_idx in polygon.loop_indices:
                            loop = mesh.loops[loop_idx]
                            if loop.vertex_index == i:
                                blend_factor = color_intensity
                                existing_color = color_layer.data[loop_idx].color
                                color_layer.data[loop_idx].color = (
                                    tumor_color[0] * blend_factor + existing_color[0] * (1-blend_factor),
                                    tumor_color[1] * blend_factor + existing_color[1] * (1-blend_factor),
                                    tumor_color[2] * blend_factor + existing_color[2] * (1-blend_factor),
                                    1.0
                                )
                                colored_vertices += 1
            
            affected_vertices += 1

    mesh.update()
    print(f"Applied shape key {tumor_key.name} with {colored_vertices} colored vertices")

    base_duration = random.randint(120, 240)
    duration_variation = random.uniform(0.8, 1.2)
    duration = int(base_duration * duration_variation)
    
    grow_time = random.randint(duration // 6, duration // 3)
    peak_time = random.randint(duration // 3, duration // 2)
    fade_start = random.randint(int(duration * 0.5), int(duration * 0.7))
    
    peak_frame = frame + grow_time
    fade_frame = frame + fade_start
    end_frame = frame + duration

    keyframes = [(frame, 0.0), (peak_frame, 1.0), (frame + peak_time, 1.0),
                 (fade_frame, random.uniform(0.5, 0.8)),
                 (fade_frame + (end_frame - fade_frame) // 2, random.uniform(0.2, 0.4)),
                 (end_frame, 0.0)]

    for f, val in keyframes:
        tumor_key.value = val
        tumor_key.keyframe_insert(data_path="value", frame=f)

    if obj.data.shape_keys.animation_data:
        action = obj.data.shape_keys.animation_data.action
        if action:
            for fcurve in action.fcurves:
                if tumor_key.name in fcurve.data_path:
                    for kf in fcurve.keyframe_points:
                        kf.interpolation = 'BEZIER'
                        kf.handle_left_type = 'AUTO_CLAMPED'
                        kf.handle_right_type = 'AUTO_CLAMPED'

    active_tumor_positions.append(seed_co)
    region_tumor_count[region] = region_tumor_count.get(region, 0) + 1
    
    color_hex = f"#{int(tumor_color[0]*255):02x}{int(tumor_color[1]*255):02x}{int(tumor_color[2]*255):02x}"
    print(f"✔️ Tumor '{tumor_key.name}' in {region} - Color: {color_hex}")
    
    return tumor_key

def get_hashtag_activity():
    global api_cache, last_api_check
    current_time = time.time()
    
    if current_time - last_api_check < 90:
        return api_cache
    
    try:
        hashtags = {}
        search_hashtags = ["#Blender", "#3DArt"]
        for hashtag in search_hashtags:
            tweets = client.search_recent_tweets(query=hashtag, max_results=10, tweet_fields=['public_metrics'])
            if tweets.data:
                activity = sum(tweet.public_metrics.get('like_count', 0) + tweet.public_metrics.get('retweet_count', 0) for tweet in tweets.data)
                hashtags[hashtag] = max(activity, 1)
            else:
                hashtags[hashtag] = 1
        api_cache.update(hashtags)
        last_api_check = current_time
        print(f"API updated: {hashtags}")
    except Exception as e:
        print(f"API Error (using cache): {e}")
    
    return api_cache

def aggressive_cleanup():
    global active_tumor_positions
    if not obj.data.shape_keys:
        return
    
    current_frame = bpy.context.scene.frame_current
    keys_to_remove = []
    
    for key in obj.data.shape_keys.key_blocks:
        if key.name.startswith("T_"):
            try:
                frame_part = key.name.split("_")[1]
                tumor_frame = int(frame_part)
                if current_frame - tumor_frame > 300:
                    keys_to_remove.append(key.name)
            except (IndexError, ValueError):
                continue
    
    for key_name in keys_to_remove:
        try:
            obj.shape_key_remove(obj.data.shape_keys.key_blocks[key_name])
        except:
            pass
    
    active_tumor_positions = active_tumor_positions[-20:]
    
    if keys_to_remove:
        print(f"Cleaned {len(keys_to_remove)} old tumors")

def constant_tumor_generation(scene):
    current_frame = scene.frame_current

    if current_frame % 60 == 0 and current_frame > 60:
        if current_frame % 360 == 0:
            aggressive_cleanup()

    should_generate = False
    generation_intensity = 1
    target_regions = []
    
    if current_frame % 60 == 0:
        hashtag_counts = get_hashtag_activity()
        total_activity = sum(hashtag_counts.values())
        if total_activity > 80:
            should_generate = True
            generation_intensity = 3 if total_activity > 180 else 2
            target_regions = ["back", "sides", "top"]
        print(f"F{current_frame} - API Activity: {dict(hashtag_counts)} - Total: {total_activity}")
    
    cycle_position = (current_frame // 30) % 3
    if current_frame % 30 == 0:
        should_generate = True
        region_cycle = ["back", "sides", "top"]
        target_regions = [region_cycle[cycle_position % len(region_cycle)]]
    
    if random.random() < 0.05:
        should_generate = True
        target_regions = ["back", "sides", "top"]
    
    if current_frame % 180 == 0:
        should_generate = True
        generation_intensity = 3
        target_regions = ["back", "sides", "top"]
    
    if should_generate:
        current_keys = len(obj.data.shape_keys.key_blocks) if obj.data.shape_keys else 0
        if current_keys < 40:
            if not target_regions:
                target_regions = ["back", "sides", "top"]
            
            total_vertices = sum(len(REGION_VERTICES.get(r, [])) for r in target_regions)
            if total_vertices == 0:
                print("⚠️ No vertices in target regions")
                return
            
            num_tumors = min(generation_intensity + random.randint(0, 2), 4)
            
            for tumor_num in range(num_tumors):
                region_weights = {r: len(REGION_VERTICES.get(r, [])) / total_vertices for r in target_regions}
                target_region = random.choices(list(region_weights.keys()), weights=region_weights.values(), k=1)[0]
                if region_tumor_count.get(target_region, 0) >= 12:
                    continue
                
                vertex_pool = REGION_VERTICES.get(target_region, [])
                if not vertex_pool:
                    print(f"⚠️ No vertices in {target_region}")
                    continue

                size_roll = random.random()
                size = "small" if size_roll < 0.4 else "large"
                hashtag = random.choice(["#Blender", "#3DArt", "#Viral", "#Trending", "#Color"])
                
                success = False
                for attempt in range(25):
                    vertex_index = random.choice(vertex_pool)
                    tumor = create_ultra_fast_tumor_shape_key(current_frame, vertex_index, hashtag, size, target_region)
                    if tumor:
                        success = True
                        region_tumor_count[target_region] = region_tumor_count.get(target_region, 0) + 1
                        break
                
                if success:
                    print(f"✔️ Placed {size} {hashtag} tumor #{tumor_num+1} in {target_region}")
                else:
                    print(f"❌ Failed to place tumor in {target_region} after 25 attempts")

def setup_enhanced_viewport():
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    space.shading.type = 'SOLID'
                    space.shading.color_type = 'VERTEX'
                    space.shading.light = 'FLAT'
                    space.shading.show_backface_culling = False
                    space.overlay.show_overlays = True
                    space.overlay.show_face_orientation = False
                    print("✔️ Viewport configured for vertex color display")
                    break
    
    mesh = obj.data
    if mesh.vertex_colors.active:
        mesh.vertex_colors.active.active_render = True
        print("✔️ Vertex colors set as active render")

def initialize_ultra_fast_system():
    print("🚀 Initializing ENHANCED Constant Tumor Generation System...")
    
    handlers_to_remove = [h for h in bpy.app.handlers.frame_change_pre 
                         if 'activity_check' in h.__name__ or 'generation' in h.__name__]
    for handler in handlers_to_remove:
        bpy.app.handlers.frame_change_pre.remove(handler)
    
    # Verify and register handler
    if constant_tumor_generation not in bpy.app.handlers.frame_change_pre:
        bpy.app.handlers.frame_change_pre.append(constant_tumor_generation)
        print("✔️ Handler registered successfully")
    else:
        print("⚠️ Handler already registered, attempting to re-register")
        bpy.app.handlers.frame_change_pre.remove(constant_tumor_generation)
        bpy.app.handlers.frame_change_pre.append(constant_tumor_generation)
    
    setup_enhanced_viewport()
    
    print("✔️ ENHANCED system ready!")
    print(f"✔️ Regions: Back={len(REGION_VERTICES.get('back', []))}, Sides={len(REGION_VERTICES.get('sides', []))}, Top={len(REGION_VERTICES.get('top', []))}")

def cleanup_system():
    global active_tumor_positions, region_tumor_count
    handlers_to_remove = [h for h in bpy.app.handlers.frame_change_pre 
                         if 'activity_check' in h.__name__ or 'generation' in h.__name__]
    for handler in handlers_to_remove:
        bpy.app.handlers.frame_change_pre.remove(handler)
    
    vertex_normals_cache.clear()
    vertex_coords_cache.clear()
    active_tumor_positions.clear()
    region_tumor_count.clear()
    print("Enhanced system cleaned up")

# Pre-calculate safe vertices and regions
SAFE_VERTICES, REGION_VERTICES, centroid, bounds = get_safe_vertex_indices()

# Auto-initialize the enhanced system
initialize_ultra_fast_system()
